#!/usr/bin/make
# @configure_input@

# Basic needed directories.
depsdir = @PWD@/deps
toolsdir = @PWD@/tools
workdir = @WORKDIR@
datdir = @PWD@/data
srcdatdir = "@top_srcdir@/data"
resultsdir = @PWD@/results
LANG = "en"
DATASET = "cmu_us"

SPEAKERPROPERTIES = "@top_srcdir@/data/$(LANG)/speakerprop.sh"

SOX = @SOX@

WGET = @WGET@

SPKNAMES = awb bdl clb jmk ksp rms slt

# festlex_cmu:
festlex_cmu_File = festlex_CMU.tar.gz
festlex_cmu_MD5 = 6a2ee4fed7c3ebedf197a3b8524ccb87
festlex_cmu_URL = http://festvox.org/packed/festival/2.4/festlex_CMU.tar.gz

# festlex_poslex:
festlex_poslex_File = festlex_POSLEX.tar.gz
festlex_poslex_MD5 = aa80f9250065b318325f16fdad3a4484
festlex_poslex_URL = http://festvox.org/packed/festival/2.4/festlex_POSLEX.tar.gz

# download links


# These variables are set up to ease my life later and download and install both the festlex_cmu and festlex_poslex easily
ALLDOWNLOADS = festlex_cmu festlex_poslex
ALLCONFIGURES = festlex_cmu festlex_poslex
download_all = $(addprefix download_,$(ALLDOWNLOADS)) 
configure_all = $(addprefix configure_,$(ALLCONFIGURES)) 

# I need these two rules for manipulating spaces
empty:=
space:= $(empty) $(empty)

.PHONY: all lang_en $(download_all) $(configure_all) %.spk

all: lang_en en_slt.spk


lang_en: $(download_all) $(configure_all)

# Installation of festlex_cmu
configure_festlex_cmu: download_festlex_cmu
	mkdir -p festlex_cmu && \
	tar xzf $(festlex_cmu_File) -C festlex_cmu --strip-components 1 && \
	mkdir -p $(toolsdir)/festival/lib/dicts/cmu && \
	cp festlex_cmu/lib/dicts/cmu/cmudict-0.4.out \
	   festlex_cmu/lib/dicts/cmu/cmulex.scm \
	   festlex_cmu/lib/dicts/cmu/cmu_lts_rules.scm \
	   $(toolsdir)/festival/lib/dicts/cmu/

# and festlex_poslex
configure_festlex_poslex: download_festlex_poslex
	mkdir -p festlex_poslex && \
	tar xzf $(festlex_poslex_File) -C festlex_poslex --strip-components 1 && \
	mkdir -p $(toolsdir)/festival/lib/dicts && \
	cp festlex_poslex/lib/dicts/wsj.wp39.poslexR \
	   festlex_poslex/lib/dicts/wsj.wp39.tri.ngrambin \
	   $(toolsdir)/festival/lib/dicts/

# This target will check if the downloads are correct. If they are not
# it will download them again.
$(download_all):
	echo "$($(subst download_,,$@)_MD5)  $($(subst download_,,$@)_File)" | md5sum -c --status && echo "$(subst download_,,$@) already downloaded" || \
	( rm -f $($(subst download_,,$@)_File) && \
	$(WGET) --output-document=$($(subst download_,,$@)_File) $($(subst download_,,$@)_URL) )

# This sets up the working directory to be able to train the ARCTIC voice.
# It also starts the required training and final voice package creation rules.
%.spk: %.download lang_en
	$(eval SPK := $(word 2,$(subst _,$(space),$*)))
	$(eval DATASET := "cmu_us")
	# speakerprop.sh has some environment variables that are passed to the configure script \
	. $(SPEAKERPROPERTIES) $(SPK) && \
	# If the workdir is not properly setup: \
	if test ! -f $(workdir)/$*/hts/configure.ac  -o  ! -d $(workdir)/$*/hts/data/utts/  -o ! "`ls -A $(workdir)/$*/hts/data/utts/`"  ; then \
		# delete the workdir and re-create it. \
		rm -rf $(workdir)/$* && mkdir -p $(workdir)/$* && \
		# Copy the language generic and language specific hts demo files: \
		mkdir -p $(workdir)/$*/hts && \
		cp -r $(srcdatdir)/template_hts/* $(workdir)/$*/hts && \
		cp -r $(srcdatdir)/$(LANG)/template_hts/* $(workdir)/$*/hts && \
		# Copy the language generic and language specific packaging files: \
		mkdir -p $(workdir)/$*/pkg && \
		cp -r $(srcdatdir)/template_package/* $(workdir)/$*/pkg && \
		# Copy over the catalan specific template: \
		cp -r $(srcdatdir)/$(LANG)/template_package/* $(workdir)/$*/pkg && \
		# Customize the required festvox files: \
		for mytemplatescm in $$(ls $(workdir)/$*/pkg/skeleton/festvox/*SPEAKER*); do \
		    mycustomscm=$$(echo $$mytemplatescm | sed s/SPEAKER/$(SPK)/g) && \
		    sed -e s/SPEAKER/$(SPK)/g -e s/GENDER/$${GENDER}/g -e s/DIALECT/$${DIALECT}/g < $$mytemplatescm > $$mycustomscm && \
		    rm $$mytemplatescm;  \
		done; \
		# Create a directory to store the raw and utt files \
		mkdir -p $(workdir)/$*/hts/data/raw $(workdir)/$*/hts/data/utts && \
		if test  ! -d $(datdir)/$(LANG)/$*/$(DATASET)_$(SPK)_arctic/   -o   ! -f $(datdir)/$(LANG)/$*/$(DATASET)_$(SPK)_arctic/raw/*.raw  ; then \
			tar xjf $(datdir)/$(LANG)/$*/$(DATASET)_$(SPK)_arctic.tar.bz2 -C $(datdir)/$(LANG)/$*/; \
		fi && \
		mkdir -p "$(workdir)/$*/hts/data/raw/" && \
		# Convert using sox the wav files to raw files \
		for wavfile in $$(ls $(datdir)/$(LANG)/$*/$(DATASET)_$(SPK)_arctic/wav/*.wav); do \
		    echo "Converting $$wavfile" && \
		    NAME_WITHOUT_WAV=$$(basename $${wavfile%.*}) && \
		    NAME_WITHOUT_ARCTIC=$${NAME_WITHOUT_WAV#arctic_*} && \
		    rawfile="$(workdir)/$*/hts/data/raw/$(DATASET)_$(SPK)_$${NAME_WITHOUT_ARCTIC}.raw" && \
		    $(SOX) "$$wavfile" -r 16000 -e signed-integer -b 16 "$$rawfile";  \
		done; \
		for uttsfile in $$(ls $(datdir)/$(LANG)/$*/$(DATASET)_$(SPK)_arctic/festival/utts/*.utt); do \
		    UTTBASENAME="$$(basename $${uttsfile})" && \
		    UTTBASENAME="$${UTTBASENAME#arctic_*}" && \
		    outfile="$(workdir)/$*/hts/data/utts/$(DATASET)_$(SPK)_$${UTTBASENAME}" && \
		    mv "$$uttsfile" "$$outfile" ; \
		done; \
		$(RM) -rf $(datdir)/$(LANG)/$*/$(DATASET)_$(SPK)_arctic/; \
	fi; \
	# Now the workdir is ready, let's train the voice \
	( cd $(workdir)/$*/hts && \
	# The configure script will tell the training scripts where the tools are and will set up \
	# some properties of our speaker. This is strongly based on the HTS demo. \
	./configure --with-fest-search-path=$(toolsdir)/festival/examples \
		    --with-sptk-search-path=$(toolsdir)/bin \
	            --with-hts-search-path=$(toolsdir)/bin  \
	            --with-hts-engine-search-path=$(toolsdir)/bin \
	            SPEAKER=$(SPK) && \
	# Data analysis and voice training, again this is based on the HTS demo \
	$(MAKE) data && \
	$(MAKE) voice ) && \
	( cd $(workdir)/$*/pkg && \
	# Prepare a tar.gz file with the final files needed by festival \
	sed -e s/@SPEAKER@/$(SPK)/g -e s/@DATASET@/$${DATASET}/g < Makefile.in > Makefile && \
	$(MAKE) $(DATASET)_$(SPK)_hts.tgz && \
	# Copy this tar.gz file to the results directory \
	mkdir -p $(resultsdir) && \
	cp $(workdir)/$*/pkg/$(DATASET)_$(SPK)_hts.tgz $(resultsdir) ) || exit 1


%.download:
	$(eval SPK := $(word 2,$(subst _,$(space),$*)))
	mkdir -p "$*" && cd "$*" && \
	if [ "x$(SPK)" = "xawb" ]; then \
	  version="0.90"; \
	else \
	  version="0.95"; \
	fi && \
	[ -f "cmu_us_$(SPK)_arctic.tar.bz2" ] && echo "$(SPK) already downloaded" || \
	$(WGET) --output-document=cmu_us_$(SPK)_arctic.tar.bz2 http://www.speech.cs.cmu.edu/cmu_arctic/packed/cmu_us_$(SPK)_arctic-$$version-release.tar.bz2 


clean:
	$(RM) -rf upc_ca_base $(upc_ca_base_File)
	$(RM) -rf $(addprefix ca_,$(SPKNAMES))

distclean: clean
	$(RM) -rf Makefile
